import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Scanner;

class Contact {
    private String name;
    private String phoneNumber;

    public Contact(String name, String phoneNumber) {
        this.name = name;
        this.phoneNumber = phoneNumber;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getPhoneNumber() {
        return phoneNumber;
    }

    public void setPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
    }

    @Override
    public String toString() {
        return "Name: " + name + ", Phone Number: " + phoneNumber;
    }
}

class Phonebook {
    private ArrayList<Contact> contacts;

    public Phonebook() {
        this.contacts = new ArrayList<>();
    }

    // Phone number validation method
    private boolean isValidPhoneNumber(String phoneNumber) {
        return phoneNumber.matches("\\d{10}"); // Validates a 10-digit phone number
    }

    // Search contact by name (case-insensitive) for internal use
    private Contact searchContactInternal(String name) {
        for (Contact contact : contacts) {
            if (contact.getName().equalsIgnoreCase(name)) {
                return contact;
            }
        }
        return null;
    }

    public void insertContact(String name, String phoneNumber, Scanner scanner) {
        if (searchContactInternal(name) != null) {
            System.out.println("Contact with the name " + name + " already exists.");
            return;
        }

        // Keep asking for the phone number until it's valid
        while (!isValidPhoneNumber(phoneNumber)) {
            System.out.println("Invalid phone number. Please enter a valid 10-digit number.");
            System.out.print("Enter contact phone number: ");
            phoneNumber = scanner.nextLine();
        }

        Contact newContact = new Contact(name, phoneNumber);
        contacts.add(newContact);
        System.out.println("Contact " + name + " added successfully.");
    }

    public Contact searchContact(String name) {
        Contact contact = searchContactInternal(name);
        if (contact != null) {
            return contact;
        } else {
            return null;
        }
    }

    public void displayAllContacts() {
        if (contacts.isEmpty()) {
            System.out.println("No contacts in the phonebook.");
        } else {
            for (Contact contact : contacts) {
                System.out.println(contact);
            }
        }
    }

    public void deleteContact(String name) {
        Contact contactToDelete = searchContactInternal(name);
        if (contactToDelete != null) {
            contacts.remove(contactToDelete);
            System.out.println("Contact " + name + " deleted successfully.");
        } else {
            System.out.println("Contact " + name + " not found in the phonebook.");
        }
    }

    public void updateContact(String name, String newName, String newPhoneNumber, Scanner scanner) {
        Contact contactToUpdate = searchContactInternal(name);
        if (contactToUpdate != null) {
            if (newName != null && !newName.isEmpty()) {
                // Check for duplicates when updating name
                if (!newName.equalsIgnoreCase(name) && searchContactInternal(newName) != null) {
                    System.out.println("Cannot update contact. A contact with the new name " + newName + " already exists.");
                    return;
                }
                contactToUpdate.setName(newName);
            }
            if (newPhoneNumber != null && !newPhoneNumber.isEmpty()) {
                // Keep asking for the phone number until it's valid
                while (!isValidPhoneNumber(newPhoneNumber)) {
                    System.out.println("Invalid phone number. Please enter a valid 10-digit number.");
                    System.out.print("Enter new phone number: ");
                    newPhoneNumber = scanner.nextLine();
                }
                contactToUpdate.setPhoneNumber(newPhoneNumber);
            }
            System.out.println("Contact " + name + " updated successfully.");
        } else {
            System.out.println("Contact " + name + " not found in the phonebook.");
        }
    }

    public void sortContacts() {
        // Sort alphabetically without considering case
        Collections.sort(contacts, Comparator.comparing(Contact::getName, String.CASE_INSENSITIVE_ORDER));
        System.out.println("Contacts sorted alphabetically by name (case-insensitive).");
    }

    public void analyzeSearchAlgorithm() {
        System.out.println("The search algorithm used is a linear search, which has a time complexity of O(n).");
        System.out.println("This means that the time taken to search for a contact increases linearly with the number of contacts in the phonebook.");
    }
}

public class Main {
    public static void main(String[] args) {
        Phonebook phonebook = new Phonebook();
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("\nPhonebook Menu:");
            System.out.println("1. Insert Contact");
            System.out.println("2. Search Contact");
            System.out.println("3. Display All Contacts");
            System.out.println("4. Delete Contact");
            System.out.println("5. Update Contact");
            System.out.println("6. Sort Contacts");
            System.out.println("7. Analyze Search Algorithm");
            System.out.println("8. Exit");

            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline left-over

            switch (choice) {
                case 1:
                    System.out.print("Enter contact name: ");
                    String name = scanner.nextLine();
                    System.out.print("Enter contact phone number: ");
                    String phoneNumber = scanner.nextLine();
                    phonebook.insertContact(name, phoneNumber, scanner);
                    break;
                case 2:
                    System.out.print("Enter contact name to search: ");
                    String searchName = scanner.nextLine();
                    Contact contact = phonebook.searchContact(searchName);
                    if (contact != null) {
                        System.out.println(contact);
                    } else {
                        System.out.println("Contact " + searchName + " not found in the phonebook.");
                    }
                    break;
                case 3:
                    phonebook.displayAllContacts();
                    break;
                case 4:
                    System.out.print("Enter contact name to delete: ");
                    String deleteName = scanner.nextLine();
                    phonebook.deleteContact(deleteName);
                    break;
                case 5:
                    System.out.print("Enter contact name to update: ");
                    String updateName = scanner.nextLine();
                    System.out.print("Enter new contact name (or press Enter to keep current): ");
                    String newName = scanner.nextLine();
                    System.out.print("Enter new phone number (or press Enter to keep current): ");
                    String newPhoneNumber = scanner.nextLine();
                    phonebook.updateContact(updateName, newName.isEmpty() ? null : newName, newPhoneNumber.isEmpty() ? null : newPhoneNumber, scanner);
                    break;
                case 6:
                    phonebook.sortContacts();
                    break;
                case 7:
                    phonebook.analyzeSearchAlgorithm();
                    break;
                case 8:
                    System.out.println("Exiting the phonebook.");
                    scanner.close();
                    return;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }
}

